# MAKING A MACHINE LEARNING MODEL BASED ON LINEAR REGRESSION PREDICT CLOSING PRICES BASED ON TECHINCAL INDICATORS
# Goal: Predict the next day closing price of a stock using historical data and technical indicators.

#1. Importing all the basic required libraries
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.linear_model import LinearRegression

#2. Extracting all the required data
df = yf.download('AAPL', start='2015-01-01', end='2024-12-31')
df = df[['Volume','Open','High','Low','Close']]
#df.head()
#df.shape
#df.describe

#3. Feature Engineering: adding indicators such as
#a. SMA- Small Moving Average 
#b. EMA- Exponential Moving Avergae
#c. Daily Returns
#d. Lagged Prices
df['SMA_10'] = df['Close'].rolling(window=10).mean()
df['EMA_10'] = df['Close'].ewm(span=10, adjust=False).mean()
df['Daily_Return'] = df['Close'].pct_change()
df['Lag_1'] = df['Close'].shift(1)

#4. Cleaning the data 
df.dropna(inplace = True)

#5. Defining the features (X) and the target (y)
X = df[['Open','High','Low','Volume','SMA_10','EMA_10','Lag_1']]
y = df[['Close']]

#6. Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

#7. Model Training
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)

#8. Model Evaluation 
from sklearn.metrics import mean_squared_error, r2_score
y_pred = model.predict(X_test)
print('RMSE:', mean_squared_error(y_test, y_pred, squared=False))
print('RÂ² score:', r2_score(y_test, y_pred))

#9. Plot predictions
plt.figure(figsize = (10,5))
plt.plot(y_test.values, label = 'Actual Price')
plt.plot(y_pred, label = 'Predicted Prices')
plt.title('Actual vs Predicted Stock Price')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()
